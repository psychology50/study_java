package ddazua;

// 객체지향 언어
// Def : 현실에 존재하는 사물과 개념들을 SW적으로 구현, 그 구현된 객체들이 상호작용하여 데이터를 처리하는 방식
// obj : " 코드의 재 사용! "

// 절차지향 언어
// Def : 명령을 순서대로 처리하는 방식

// 객체? 독립적으로 존재할 수 있는 것들
// ex) 독립적으로 존재 : 고양이, 강아지 // 불가능한 것들: 고양이 꼬리, 강아지 다리...
// 객체를 지향한다? 코드를 객체화하여 독립적으로 존재할 수 있도록 한다.
// 		>>> 하나의 거대한 파일에서 필요한 코드만 가져와 재사용할 수 있게끔 한다.

/*
 	<객체지향 언어의 특징>
 	1. 추상화 : 공통적인 특징을 모아 놓은 것 // ex) [자동차] 바퀴 개수, 엑셀을 밟으면 나간다, 와이퍼 작동 etc...
 	2. 상속   : 부모 클래스의 코드를 자식이 받아오는 것. // ex) [자동차] 클래스를 상속받는 [택시], [버스], [BMW] 클래스
 	3. 캡슐화 : 사용하는 사람은 기능만 알면 된다! -> 캡슐 안에는 어떤 것이 있는지 알 필요가 없다. // 일부를 제외하고 상속받는 등의 작업은 불가능
 	4. 다형성 : 같은 모양을 갖고 있으나 다른 의미를 갖고 있는 것 // ex) '소리내기'클래스를 상속받는 '개', '고양이'는 울음소리가 다르다. (overriding) 
 		1) Over Loading : 함수의 중복정의
 		2) Over Riding : 함수의 재정의 (상속관계에서 성립)
 		
 	## 추가 내용 보충
 	1. 추상화 : 세상에 있는 것을 본따 클래스를 만들고 그 클래스의 상태와 행동을 부여하는 객체를 만든다. 다만, 실질적으로
 				모든 것을 클래스에 담고 객체를 만들기엔 불가능하므로 '필수적으로' 있어야 할 해당 객체의 요소와 특징을 만드는 것. (설계)
 	2. 상속 : 기존 상위 클래스에 근거하여 새롭게 클래스와 행위를 정의할 수 있게 돕는 것 (유지보수)
 	3. 캡슐화 : 하나의 객체에 대하여 그 객체가 특정 목적을 위해 필요한 변수나 메서드를 하나로 묶는 것. (정보의 은닉화)
 	             ex) 은행이라는 클래스 내에 잔고 조회, 수정 등의 메서드 등이 있는데 이를 public으로 선언하면 누구나 내 잔고에 손을 댈 수 있게 된다.
 	                 따라서 private로 접근 제어자를 설정하여 간접적으로 접근만 가능하도록 만든다.
 	4. 다형성 : 상속을 통해 기능 확장 및 변경 가능. 코드의 재사용, 코드 길이 감소로 인하여 유지, 보수 용이함. 쉽게 설명하면 같은 동작, 다른 결과. (유지보수)
 */

// 1. 클래스: 객체를 만들기 위해 속성과 기능을 정의하는 설계도
// 2. 인스턴스(Instance) : 클래스를 통해 만들어진 형태
//			>>> 인스턴스화 = 클래스를 통해 객체를 만드는 과정
// 3. 클래스의 사용 : 속성은 변수로, 기능은 메서드(함수)로 나타낸다.
/* 4. 클래스 구현방법
 		class 클래스명{			// 클래스명  첫 글자는 대문자로 시작.
 			// 속성(변수)
 			// 기능(메서드) 
 		}
 */

// 클래스로 객체를 만드는 방법
/* 자료형 참조변수 = new 클래스명();

 	* 참조변수 : 클래스로 생성된 객체 값(인스턴스) 저장할 공간
 	* new : 메모리 할당
 	* 클래스명() : 클래스로 객체를 만들어라
 	=> 클래스로 객체 값을 만들 메모리를 할당하고, 객체 값을 생성해 변수에 저장해라!
 */

class ClassA {
	int x = 10;
	void f1() {
		System.out.println("f1()");
	}
	
}


public class WhatClass_ObjectOriented01 {
	public static void main(String[] args) {
		// 자료형 변수 = 객체값;  // 자료형 변수 : 내가 가질 값이 어느정도의 공간이 필요한지 할당해줘야 함.
		// 클랙스명 참조변수 = new 클래스명();
		ClassA ca = new ClassA();
		System.out.println(ca.x);	// 객체변수.필드명  - 변수의 사용: 변수에 값 저장, 변수의 값의 연산, 출력...
		ca.f1();					//					- 메서드의 사용: 메서드 호출
		
		ca.x = 30;
		System.out.println(ca.x);  
	}
	
}
